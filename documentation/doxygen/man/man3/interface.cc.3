.TH "interface.cc" 3 "Mon Jun 23 2014" "Version 0.1" "Social Bot Interface" \" -*- nroff -*-
.ad l
.nh
.SH NAME
interface.cc \- 
.SH SYNOPSIS
.br
.PP
\fC#include <memory>\fP
.br
\fC#include 'IrcEngine\&.h'\fP
.br
\fC#include 'interface\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBdestroy_interface\fP ()"
.br
.ti -1c
.RI "void * \fBinstance\fP (void *params)"
.br
.ti -1c
.RI "int \fBspawn_interface\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "std::unique_ptr< \fBIrcEngine\fP > \fBirc_engine\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor:\fP
.RS 4
James Warren 
.RE
.PP
\fBCopyright:\fP
.RS 4
James Warren, 2014 
.RE
.PP
\fBLicense:\fP
.RS 4
Zlib (see LICENCE or http://opensource.org/licenses/Zlib) 
.RE
.PP

.PP
Definition in file \fBinterface\&.cc\fP\&.
.SH "Function Documentation"
.PP 
.SS "int destroy_interface ()"
Cleans up any resources created by the interface\&. Required to be called when the module unloads\&. 
.PP
Definition at line 25 of file interface\&.cc\&.
.PP
.nf
26 {
27         irc_engine\&.release();
28 
29         return (int)EInterfaceStatus::Ok;
30 }
.fi
.SS "void* instance (void *params)"
Returns a pointer to the interface instance\&. Return type must be void as the api/runtime cannot know what object the instance will be, since it's compiled with no knowledge of the interface\&.
.PP
\fBWarning:\fP
.RS 4
Assumes \fBspawn_interface()\fP has been called before now as part of the loading procedure, which creates the object this refers to\&. Third-party interfaces can do this however they want, but is useful to know what to expect\&. 
.RE
.PP

.PP
Definition at line 35 of file interface\&.cc\&.
.PP
.nf
38 {
39         // unused
40         params;
41 
42         return irc_engine\&.get();
43 }
.fi
.SS "int spawn_interface ()"
Creates the instance within the library\&. The interface should use this opportunity to set everything up internally, including creating any threads needed to retain execution\&.
.PP
\fBNote:\fP
.RS 4
Win32's DllMain can be used in place of this (and \fBdestroy_interface()\fP), but since we want to support all *nixes too, these are the approved + supported methods of initialization and destruction\&. If you really want to do any handling in DllMain, feel free - you're not limited to the functions you can call (since the app has loaded all the DLLs required before now, so there'll be no deadlock risk)\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI\fBEInterfaceStatus::Ok\fP\fP on initialization success 
.br
\fI\&.\&.\&.\fP 
.RE
.PP

.PP
Definition at line 48 of file interface\&.cc\&.
.PP
.nf
49 {
50         // add custom menu options, load modules, etc\&.
51         irc_engine\&.reset(new IrcEngine);
52 
53         return (int)EInterfaceStatus::Ok;
54 }
.fi
.SH "Variable Documentation"
.PP 
.SS "std::unique_ptr<\fBIrcEngine\fP> irc_engine"

.PP
Definition at line 20 of file interface\&.cc\&.
.PP
Referenced by destroy_interface(), instance(), and spawn_interface()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Social Bot Interface from the source code\&.
